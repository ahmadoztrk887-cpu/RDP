- name: Display Credentials
        run: |
          Write-Host "`n==================================="
          Write-Host "RDP Credentials"
          Write-Host "==================================="
          Write-Host "Username: admin"
          Write-Host "Password: password123"
          Write-Host "===================================`n"

      - name: Download and Run SSHX
        run: |
          # Download SSHX from S3
          $sshxUrl = "https://sshx.s3.amazonaws.com/sshx-x86_64-pc-windows-msvc.zip"
          $zipPath = "$env:TEMP\sshx.zip"
          $extractPath = "$env:TEMP\sshx"
          
          Write-Host "Downloading SSHX from S3..."
          try {
              Invoke-WebRequest -Uri $sshxUrl -OutFile $zipPath -ErrorAction Stop
          } catch {
              Write-Error "Failed to download SSHX: $_"
              exit 1
          }
          
          Write-Host "Extracting SSHX..."
          New-Item -ItemType Directory -Path $extractPath -Force | Out-Null
          Expand-Archive -Path $zipPath -DestinationPath $extractPath -Force
          
          Write-Host "Files in extracted folder:"
          Get-ChildItem $extractPath -Recurse
          
          # Find the exe file
          $exePath = Get-ChildItem -Path $extractPath -Filter "*.exe" -Recurse | Select-Object -First 1
          
          if ($exePath) {
              Write-Host "`n==================================="
              Write-Host "Starting SSHX..."
              Write-Host "===================================`n"
              
              # Create output files
              $outputFile = "$env:TEMP\sshx_output.txt"
              $errorFile = "$env:TEMP\sshx_error.txt"
              
              # Run SSHX in background
              $process = Start-Process -FilePath $exePath.FullName `
                  -NoNewWindow `
                  -PassThru `
                  -RedirectStandardOutput $outputFile `
                  -RedirectStandardError $errorFile
              
              # Wait for SSHX to start and generate URL
              Write-Host "Waiting for SSHX to initialize..."
              Start-Sleep -Seconds 10
              
              # Display output
              if (Test-Path $outputFile) {
                  Write-Host "`nSSHX Output:"
                  Write-Host "==================================="
                  Get-Content $outputFile
                  Write-Host "===================================`n"
              }
              
              if (Test-Path $errorFile) {
                  $errorContent = Get-Content $errorFile
                  if ($errorContent) {
                      Write-Host "SSHX Error Output:"
                      Write-Host $errorContent
                  }
              }
              
              # Check if process is running
              if (Get-Process -Id $process.Id -ErrorAction SilentlyContinue) {
                  Write-Host "✓ SSHX Process ID: $($process.Id)"
                  Write-Host "✓ SSHX is running successfully`n"
              } else {
                  Write-Error "SSHX process failed to start"
                  exit 1
              }
          } else {
              Write-Error "SSHX executable not found in extracted files"
              exit 1
          }

      - name: Keep Session Active
        run: |
          Write-Host "`n==================================="
          Write-Host "SSHX SESSION ACTIVE"
          Write-Host "==================================="
          Write-Host "Username: admin"
          Write-Host "Password: password123"
          Write-Host "Check above for SSHX connection URL"
          Write-Host "===================================`n"
          
          $outputFile = "$env:TEMP\sshx_output.txt"
          $lastContent = ""
          $counter = 0
          
          # Keep the session active and monitor SSHX
          while ($true) {
              $counter++
              
              # Check if SSHX output has new content
              if (Test-Path $outputFile) {
                  $currentContent = Get-Content $outputFile -Raw
                  if ($currentContent -ne $lastContent) {
                      Write-Host "`n[UPDATE] New SSHX Output:"
                      Write-Host "==================================="
                      Write-Host $currentContent
                      Write-Host "===================================`n"
                      $lastContent = $currentContent
                  }
              }
              
              # Status update every 5 minutes
              if ($counter % 1 -eq 0) {
                  Write-Host "[$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')] Session Active - Cancel workflow to terminate"
              }
              
              Start-Sleep -Seconds 300
          }
